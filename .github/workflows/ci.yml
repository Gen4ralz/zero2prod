# Name of workflow. Github displays the names of workflows on "Actions" tab
name: ci-test

# Automatically trigger the workflow
on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

env:
  CARGO_TERM_COLOR: always
  SQLX_VERSION: 0.6.2
  SQLX_FEATURES: 'rustls,postgres'

# A workflow run is made up of one or more jobs, which run in parallel by default
# Each job runs in a runner environment specified by runs-on
jobs:
  # Unique identifier of our job (`job_id`)
  test:
    # Set the name `Test` for the job, which will display in Github UI
    name: Test
    # Containers must run in Linux OS
    runs-on: ubuntu-latest
    # Service containers to run with the `test` container job
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:15
        # Environment variables scoped only for the `postgres` element
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        # When map ports using the ports keyword, Github uses the --publish command to publish the container's ports to the Docker host
        # Open tcp port 5432 on host and service container
        ports:
          - 5432:5432
    steps:
      # Download a copy of in repo before running CI tests
      - name: Check out repository code
        # uses keyword specifies that this step will run v3 of the actions/checkout action
        # This is an action that checks out repository onto the runnerm allowing to run scripts or other actions against your code
        # Should use the checkout action any time your wirkflow will run against the repository's code
        uses: actions/checkout@v3

        # Ths Github Action installs a Rust toolchain using rustup
      - name: Install the Rust toolchain
        uses: dtolnay/rust-toolchain@stable

        # Github Action that implements smart caching for rust/cargo projects with sensible default.
      - name: Rust Cache Action
        uses: Swatinem/rust-cache@v2
        with:
          # Additional cache key that is added alongside the automatic 'job'-based cache key and can be used to further differentiate jobs. default: empty
          key: sqlx-${{ env.SQLX_VERSION }}

      - name: Install sqlx-cli
        run:
          cargo install sqlx-cli
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features
          --locked
          # --locked flag can be used to  force Cargo to use the packaged Cargo.lock file if it is available.
          # This may be useful for ensuring reproducible builds, to use the exact same set of dependencies that were available when the package was published.
          # It may also be useful if a newer version of a dependency is published that no longer builds on system, or has other problems

      - name: Install postgres-client
        run: sudo apt-get update && sudo apt-get install postgresql-client -y

      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/init_db.sh

      - name: Run tests
        run: cargo test

  # 'fmt' container job
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          # Specific to dtolnay/rust-toolchain: Comma-seperated string of additional components to install
          components: rustfmt
      - name: Enforce formatting
        run: cargo fmt --check

  # 'clippy' container job
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
        with:
          key: sqlx-${{ env.SQLX_VERSION }}
      - name: Install sqlx-cli
        run: cargo install sqlx-cli
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features
          --locked
      - name: Install postgresql-client
        run: sudo apt-get update && sudo apt-get install postgresql-client -y
      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/init_db.sh
      - name: Linting
        run: cargo clippy -- -D warnings

  # 'coverage' container job
  coverage:
    name: Code coverage
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - name: Install postgresql-client
        run: sudo apt-get update && sudo apt-get install postgresql-client -y
      - uses: Swatinem/rust-cache@v2
        with:
          key: sqlx-${{ env.SQLX_VERSION }}
      - name: Install sqlx-cli
        run: cargo install sqlx-cli
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features
          --locked
      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/init_db.sh
      - name: Generate code coverage
        run: cargo install cargo-tarpaulin && cargo tarpaulin --verbose --workspace
